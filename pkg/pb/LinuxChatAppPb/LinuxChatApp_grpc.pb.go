// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: LinuxChatApp.proto

package LinuxChatAppPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LinuxChatAppService_CreateUser_FullMethodName          = "/linuxChatApp.LinuxChatAppService/CreateUser"
	LinuxChatAppService_DeleteUser_FullMethodName          = "/linuxChatApp.LinuxChatAppService/DeleteUser"
	LinuxChatAppService_CreateChatRoom_FullMethodName      = "/linuxChatApp.LinuxChatAppService/CreateChatRoom"
	LinuxChatAppService_JoinChatRoom_FullMethodName        = "/linuxChatApp.LinuxChatAppService/JoinChatRoom"
	LinuxChatAppService_LeaveChatRoom_FullMethodName       = "/linuxChatApp.LinuxChatAppService/LeaveChatRoom"
	LinuxChatAppService_SendMessage_FullMethodName         = "/linuxChatApp.LinuxChatAppService/SendMessage"
	LinuxChatAppService_ViewListOfUsers_FullMethodName     = "/linuxChatApp.LinuxChatAppService/ViewListOfUsers"
	LinuxChatAppService_ViewListOfChatRooms_FullMethodName = "/linuxChatApp.LinuxChatAppService/ViewListOfChatRooms"
)

// LinuxChatAppServiceClient is the client API for LinuxChatAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinuxChatAppServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserNameRequest, opts ...grpc.CallOption) (*CreateUserNameResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	CreateChatRoom(ctx context.Context, in *CreateChatRoomRequest, opts ...grpc.CallOption) (*CreateChatRoomResponse, error)
	JoinChatRoom(ctx context.Context, in *JoinChatRoomRequest, opts ...grpc.CallOption) (*JoinChatRoomResponse, error)
	LeaveChatRoom(ctx context.Context, in *LeaveChatRoomRequest, opts ...grpc.CallOption) (*LeaveChatRoomResponse, error)
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (LinuxChatAppService_SendMessageClient, error)
	ViewListOfUsers(ctx context.Context, in *ViewListOfUsersRequest, opts ...grpc.CallOption) (*ViewListOfUsersResponse, error)
	ViewListOfChatRooms(ctx context.Context, in *ViewListOfChatRoomsRequest, opts ...grpc.CallOption) (*ViewListOfChatRoomsResponse, error)
}

type linuxChatAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinuxChatAppServiceClient(cc grpc.ClientConnInterface) LinuxChatAppServiceClient {
	return &linuxChatAppServiceClient{cc}
}

func (c *linuxChatAppServiceClient) CreateUser(ctx context.Context, in *CreateUserNameRequest, opts ...grpc.CallOption) (*CreateUserNameResponse, error) {
	out := new(CreateUserNameResponse)
	err := c.cc.Invoke(ctx, LinuxChatAppService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linuxChatAppServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, LinuxChatAppService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linuxChatAppServiceClient) CreateChatRoom(ctx context.Context, in *CreateChatRoomRequest, opts ...grpc.CallOption) (*CreateChatRoomResponse, error) {
	out := new(CreateChatRoomResponse)
	err := c.cc.Invoke(ctx, LinuxChatAppService_CreateChatRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linuxChatAppServiceClient) JoinChatRoom(ctx context.Context, in *JoinChatRoomRequest, opts ...grpc.CallOption) (*JoinChatRoomResponse, error) {
	out := new(JoinChatRoomResponse)
	err := c.cc.Invoke(ctx, LinuxChatAppService_JoinChatRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linuxChatAppServiceClient) LeaveChatRoom(ctx context.Context, in *LeaveChatRoomRequest, opts ...grpc.CallOption) (*LeaveChatRoomResponse, error) {
	out := new(LeaveChatRoomResponse)
	err := c.cc.Invoke(ctx, LinuxChatAppService_LeaveChatRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linuxChatAppServiceClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (LinuxChatAppService_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &LinuxChatAppService_ServiceDesc.Streams[0], LinuxChatAppService_SendMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &linuxChatAppServiceSendMessageClient{stream}
	return x, nil
}

type LinuxChatAppService_SendMessageClient interface {
	Send(*MessageRequest) error
	Recv() (*MessageResponse, error)
	grpc.ClientStream
}

type linuxChatAppServiceSendMessageClient struct {
	grpc.ClientStream
}

func (x *linuxChatAppServiceSendMessageClient) Send(m *MessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *linuxChatAppServiceSendMessageClient) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *linuxChatAppServiceClient) ViewListOfUsers(ctx context.Context, in *ViewListOfUsersRequest, opts ...grpc.CallOption) (*ViewListOfUsersResponse, error) {
	out := new(ViewListOfUsersResponse)
	err := c.cc.Invoke(ctx, LinuxChatAppService_ViewListOfUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linuxChatAppServiceClient) ViewListOfChatRooms(ctx context.Context, in *ViewListOfChatRoomsRequest, opts ...grpc.CallOption) (*ViewListOfChatRoomsResponse, error) {
	out := new(ViewListOfChatRoomsResponse)
	err := c.cc.Invoke(ctx, LinuxChatAppService_ViewListOfChatRooms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinuxChatAppServiceServer is the server API for LinuxChatAppService service.
// All implementations must embed UnimplementedLinuxChatAppServiceServer
// for forward compatibility
type LinuxChatAppServiceServer interface {
	CreateUser(context.Context, *CreateUserNameRequest) (*CreateUserNameResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	CreateChatRoom(context.Context, *CreateChatRoomRequest) (*CreateChatRoomResponse, error)
	JoinChatRoom(context.Context, *JoinChatRoomRequest) (*JoinChatRoomResponse, error)
	LeaveChatRoom(context.Context, *LeaveChatRoomRequest) (*LeaveChatRoomResponse, error)
	SendMessage(LinuxChatAppService_SendMessageServer) error
	ViewListOfUsers(context.Context, *ViewListOfUsersRequest) (*ViewListOfUsersResponse, error)
	ViewListOfChatRooms(context.Context, *ViewListOfChatRoomsRequest) (*ViewListOfChatRoomsResponse, error)
	mustEmbedUnimplementedLinuxChatAppServiceServer()
}

// UnimplementedLinuxChatAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLinuxChatAppServiceServer struct {
}

func (UnimplementedLinuxChatAppServiceServer) CreateUser(context.Context, *CreateUserNameRequest) (*CreateUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedLinuxChatAppServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedLinuxChatAppServiceServer) CreateChatRoom(context.Context, *CreateChatRoomRequest) (*CreateChatRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatRoom not implemented")
}
func (UnimplementedLinuxChatAppServiceServer) JoinChatRoom(context.Context, *JoinChatRoomRequest) (*JoinChatRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChatRoom not implemented")
}
func (UnimplementedLinuxChatAppServiceServer) LeaveChatRoom(context.Context, *LeaveChatRoomRequest) (*LeaveChatRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChatRoom not implemented")
}
func (UnimplementedLinuxChatAppServiceServer) SendMessage(LinuxChatAppService_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedLinuxChatAppServiceServer) ViewListOfUsers(context.Context, *ViewListOfUsersRequest) (*ViewListOfUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewListOfUsers not implemented")
}
func (UnimplementedLinuxChatAppServiceServer) ViewListOfChatRooms(context.Context, *ViewListOfChatRoomsRequest) (*ViewListOfChatRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewListOfChatRooms not implemented")
}
func (UnimplementedLinuxChatAppServiceServer) mustEmbedUnimplementedLinuxChatAppServiceServer() {}

// UnsafeLinuxChatAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinuxChatAppServiceServer will
// result in compilation errors.
type UnsafeLinuxChatAppServiceServer interface {
	mustEmbedUnimplementedLinuxChatAppServiceServer()
}

func RegisterLinuxChatAppServiceServer(s grpc.ServiceRegistrar, srv LinuxChatAppServiceServer) {
	s.RegisterService(&LinuxChatAppService_ServiceDesc, srv)
}

func _LinuxChatAppService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinuxChatAppServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinuxChatAppService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinuxChatAppServiceServer).CreateUser(ctx, req.(*CreateUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinuxChatAppService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinuxChatAppServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinuxChatAppService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinuxChatAppServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinuxChatAppService_CreateChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinuxChatAppServiceServer).CreateChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinuxChatAppService_CreateChatRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinuxChatAppServiceServer).CreateChatRoom(ctx, req.(*CreateChatRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinuxChatAppService_JoinChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChatRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinuxChatAppServiceServer).JoinChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinuxChatAppService_JoinChatRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinuxChatAppServiceServer).JoinChatRoom(ctx, req.(*JoinChatRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinuxChatAppService_LeaveChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveChatRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinuxChatAppServiceServer).LeaveChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinuxChatAppService_LeaveChatRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinuxChatAppServiceServer).LeaveChatRoom(ctx, req.(*LeaveChatRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinuxChatAppService_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LinuxChatAppServiceServer).SendMessage(&linuxChatAppServiceSendMessageServer{stream})
}

type LinuxChatAppService_SendMessageServer interface {
	Send(*MessageResponse) error
	Recv() (*MessageRequest, error)
	grpc.ServerStream
}

type linuxChatAppServiceSendMessageServer struct {
	grpc.ServerStream
}

func (x *linuxChatAppServiceSendMessageServer) Send(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *linuxChatAppServiceSendMessageServer) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LinuxChatAppService_ViewListOfUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewListOfUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinuxChatAppServiceServer).ViewListOfUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinuxChatAppService_ViewListOfUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinuxChatAppServiceServer).ViewListOfUsers(ctx, req.(*ViewListOfUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinuxChatAppService_ViewListOfChatRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewListOfChatRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinuxChatAppServiceServer).ViewListOfChatRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinuxChatAppService_ViewListOfChatRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinuxChatAppServiceServer).ViewListOfChatRooms(ctx, req.(*ViewListOfChatRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinuxChatAppService_ServiceDesc is the grpc.ServiceDesc for LinuxChatAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinuxChatAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "linuxChatApp.LinuxChatAppService",
	HandlerType: (*LinuxChatAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _LinuxChatAppService_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _LinuxChatAppService_DeleteUser_Handler,
		},
		{
			MethodName: "CreateChatRoom",
			Handler:    _LinuxChatAppService_CreateChatRoom_Handler,
		},
		{
			MethodName: "JoinChatRoom",
			Handler:    _LinuxChatAppService_JoinChatRoom_Handler,
		},
		{
			MethodName: "LeaveChatRoom",
			Handler:    _LinuxChatAppService_LeaveChatRoom_Handler,
		},
		{
			MethodName: "ViewListOfUsers",
			Handler:    _LinuxChatAppService_ViewListOfUsers_Handler,
		},
		{
			MethodName: "ViewListOfChatRooms",
			Handler:    _LinuxChatAppService_ViewListOfChatRooms_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _LinuxChatAppService_SendMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "LinuxChatApp.proto",
}
